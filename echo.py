import os
import aiohttp
from aiogram import Dispatcher, Bot, types
from aiogram.filters import Command
from aiogram.types import Message, ContentType, Sticker, User, StickerSet
from aiogram import F
from convert import convert_ogg_to_flac, convert_video_note_to_flac

API_TOKEN: str = os.getenv('hu_do_bot')

bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
async def process_start_command(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è —Ç–µ–±—è, {message.from_user.first_name}! '
                         f'\U00002763\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
async def process_help_command(message: Message):
    await message.answer('–ù–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —è –æ—Ç–≤–µ—á—É —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º.\n–ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª—ë—à—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫'
                         ' - —è –ø–µ—Ä–µ–≤–µ–¥—É –∏—Ö –≤ —Ç–µ–∫—Å—Ç üëç')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
# –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ "/start" –∏ "/help"
async def send_echo(message: Message):
    if message.text is not None:
        await message.answer(text=f'–í—Å–µ –≥–æ–≤–æ—Ä—è—Ç {message.text}.\n–ê —Ç—ã –∫—É–ø–∏ —Å–ª–æ–Ω–∞ \U0001F418')
        sticker_set: StickerSet = await bot.get_sticker_set(name='WildElephant')
        print(f'–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç')
        await message.answer_sticker(sticker_set.stickers[11].file_id)
    else:
        await message.answer(text=f'{message.from_user.first_name}, —Ç—É—Ç –Ω–∞—à–∏ –ø–æ–ª–Ω–æ–º–æ—á–∏—è - –≤—Å—ë...\n–æ–∫–æ–Ω—á–µ–Ω—ã üò¢'
                                  f'\n–Ø –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω üôÑ')
        sticker_set: StickerSet = await bot.get_sticker_set(name='WildElephant')
        print(f'–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç')
        await message.answer_sticker(sticker_set.stickers[-8].file_id)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ—Ç—É —Ñ–æ—Ç–æ
async def send_photo_echo(message: Message):
    print('–û—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ')
    sticker_set: StickerSet = await bot.get_sticker_set(name='WildElephant')
    await message.answer(text=f'–ö—Ä–∞—Å–∏–≤–æ–µ ü§©')
    await message.answer_sticker(sticker_set.stickers[7].file_id)


async def send_animation_echo(message: Message):
    print('–û—Ç–≤–µ—Ç –Ω–∞ –≥–∏—Ñ–∫—É')
    sticker_set: StickerSet = await bot.get_sticker_set(name='WildElephant')
    await message.answer(text=f'–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–≤–æ—è –≥–∏—Ñ–∫–∞ üòä')
    await message.answer_sticker(sticker_set.stickers[-4].file_id)


async def send_sticker_echo(message: Message):
    await message.answer(text=f'–í—Å–µ –≥–æ–≤–æ—Ä—è—Ç {message.sticker.emoji}.\n–ê —Ç—ã –∫—É–ø–∏ —Å–ª–æ–Ω–∞ \U0001F418')
    sticker_set: StickerSet = await bot.get_sticker_set(name='WildElephant')
    print(f'–û—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä \n')
    await message.answer_sticker(sticker_set.stickers[11].file_id)


async def speach_recognition(message: Message):
    if message.voice:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        voice_file = message.voice.file_id
        voice_path = f'voice_{message.message_id}.ogg'  # –ó–∞–¥–∞–π—Ç–µ –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_info = await bot.get_file(voice_file)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        voice_data = await bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫
        with open(voice_path, 'wb') as f:
            f.write(voice_data.read())

        print(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {voice_path}")
        await message.answer('–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
        text = convert_ogg_to_flac(voice_path)
        await message.answer(text)


async def video_to_text(message: Message):
    await message.answer('–≠—Ç–æ –≤–∏–¥–µ–æ')
    if message.video_note:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏
        file_info = await bot.get_file(message.video_note.file_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL-–∞–¥—Ä–µ—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏
        video_note_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(video_note_url) as response:
                response.raise_for_status()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫—É –Ω–∞ –¥–∏—Å–∫
                video_note_path = f'video_note_{message.video_note.file_unique_id}.mp4'
                with open(video_note_path, 'wb') as file:
                    while True:
                        chunk = await response.content.read(1024)
                        if not chunk:
                            break
                        file.write(chunk)

        print("–í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ video_note.mp4")
        await message.answer('–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
        text = convert_video_note_to_flac(video_note_path)
        await message.answer(text)
        os.remove(video_note_path)
        os.remove('audio.flac')


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
dp.message.register(process_start_command, Command(commands='start'))
dp.message.register(process_help_command, Command(commands='help'))
dp.message.register(send_photo_echo, F.photo)
dp.message.register(send_sticker_echo, F.sticker)
dp.message.register(speach_recognition, F.voice)
dp.message.register(video_to_text, F.video_note)
dp.message.register(send_animation_echo, F.animation)
dp.message.register(send_echo)

if __name__ == '__main__':
    dp.run_polling(bot)
